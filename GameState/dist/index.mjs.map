{"version":3,"file":"index.mjs","sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/native.js","../src/types.ts","../node_modules/uuid/dist/esm-browser/v4.js","../src/index.ts"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","export type PlayerAction = {\n    playerId: string;\n    choice: Choice;\n}\n\nexport enum Choice {\n    Rock = 'rock',\n    Paper = 'paper',\n    Scissors = 'scissors'\n}","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { v4 as uuidv4 } from 'uuid';\nimport { Choice, PlayerAction } from \"./types\";\n\ninterface Player {\n\twebsocket: WebSocket;\n\tid: string;\n\twins: number;\n}\n\ninterface Round {\n\tnumber: number;\n\ttime: number;\n\tchoices: Map<string, string>\n\twinner?: string;\n}\n\ntype Message = Message.RoundComplete | Message.Healthcheck;\n\nnamespace Message {\n\texport type RoundComplete = {\n\t\ttype: 'round';\n\t\tdata: Round;\n\t}\n\n\texport type RoundOngoing = {\n\t\ttype: 'choice';\n\t\tdata: {\n\t\t\tplayerId: string;\n\t\t}\n\t}\n\n\texport type Healthcheck = {\n\t\ttype: 'healthcheck';\n\t}\n}\n\n// every 10 seconds\nconst healthCheckInterval = 10e3;\n\nexport class GameState {\n\tid: string;\n\tplayers: Map<string, Player>;\n\trounds: Array<Round>;\n\tcurrentRound: number;\n\tstorage: DurableObjectStorage;\n\tdolocation: string;\n\n\tconstructor(state: DurableObjectState) {\n\t\tthis.id = state.id.toString()\n\t\tthis.players = new Map();\n\t\tthis.rounds = new Array();\n\t\tthis.currentRound = 0;\n\t\tthis.storage = state.storage;\n\t\tthis.dolocation = '';\n\n\t\tthis.scheduleNextAlarm(this.storage);\n\t\tthis.getDurableObjectLocation();\n\t}\n\n\tasync fetch(request: Request): Promise<Response> {\n\t\tconst { headers, cf } = request;\n\n\t\t// pass the request to Durable Object for any WebSocket connection\n\t\tif (headers.get('upgrade') === 'websocket' && cf !== undefined) {\n\t\t\tif (this.players.size > 1) {\n\t\t\t\treturn new Response('Game is FULL!', { status: 403 })\n\t\t\t}\n\n\t\t\t// To accept the WebSocket request, we create a WebSocketPair (which is like a socketpair,\n\t\t\t// i.e. two WebSockets that talk to each other), we return one end of the pair in the\n\t\t\t// response, and we operate on the other end. Note that this API is not part of the\n\t\t\t// Fetch API standard; unfortunately, the Fetch API / Service Workers specs do not define\n\t\t\t// any way to act as a WebSocket server today.\n\t\t\tlet pair = new WebSocketPair();\n\t\t\tconst [client, server] = Object.values(pair);\n\n\t\t\t// We're going to take pair[1] as our end, and return pair[0] to the client.\n\t\t\tconst player = await this.handleWebSocketSession(server, cf);\n\n\t\t\t// Now we return the other end of the pair to the client.\n\t\t\treturn new Response(JSON.stringify({ id: player?.id }), { status: 101, webSocket: client });\n\t\t}\n\n\t\treturn new Response(this.id);\n\t}\n\n\tresolveRound(): Round {\n\t\tconst [a, b] = this.players;\n\t\tconst round = this.rounds[this.currentRound];\n\t\tif ((round.choices.get(a[0]) === Choice.Rock && round.choices.get(b[0]) === Choice.Scissors) ||\n\t\t\t(round.choices.get(a[0]) === Choice.Paper && round.choices.get(b[0]) === Choice.Rock) ||\n\t\t\t(round.choices.get(a[0]) === Choice.Scissors && round.choices.get(b[0]) === Choice.Paper)) {\n\t\t\tround.winner = a[0]\n\t\t} else {\n\t\t\tround.winner = b[0]\n\t\t}\n\t\tthis.rounds[this.currentRound] = round\n\t\tthis.currentRound++\n\t\treturn round\n\t}\n\n\tasync handleWebSocketSession(webSocket: WebSocket, metadata: IncomingRequestCfProperties): Promise<Player | undefined> {\n\t\t// Accept our end of the WebSocket. This tells the runtime that we'll be terminating the\n\t\t// WebSocket in JavaScript, not sending it elsewhere.\n\t\twebSocket.accept();\n\n\t\t// Create our session and add it to the users map.\n\t\tconst playerId = uuidv4();\n\t\tthis.players.set(playerId, {\n\t\t\tid: playerId,\n\t\t\twebsocket: webSocket,\n\t\t\twins: 0,\n\t\t});\n\n\t\twebSocket.addEventListener('message', async msg => {\n\t\t\ttry {\n\t\t\t\tlet round = JSON.parse(msg.data.toString()) as PlayerAction;\n\n\t\t\t\t// TODO(maybe): Send an ack?\n\t\t\t\t// TODO(maybe): Lock state?\n\t\t\t\t// TODO(maybe): Prevent player some setting choice twice?\n\t\t\t\tthis.rounds[this.currentRound].choices.set(playerId, round.choice)\n\t\t\t\tconst outbound: Message.RoundOngoing = { type: 'choice', data: { playerId } }\n\t\t\t\treturn this.broadcast(JSON.stringify(outbound))\n\t\t\t} catch (err: unknown) {\n\t\t\t\t// Report any exceptions directly back to the client. As with our handleErrors() this\n\t\t\t\t// probably isn't what you'd want to do in production, but it's convenient when testing.\n\t\t\t\tif (err instanceof Error) {\n\t\t\t\t\twebSocket.send(JSON.stringify({ error: err.stack }));\n\t\t\t\t} else {\n\t\t\t\t\t// TODO: Better message\n\t\t\t\t\twebSocket.send('something went wrong')\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet closeOrErrorHandler = () => {\n\t\t\tconsole.log('player', playerId);\n\t\t};\n\t\twebSocket.addEventListener('close', closeOrErrorHandler);\n\t\twebSocket.addEventListener('error', closeOrErrorHandler);\n\n\t\treturn this.players.get(playerId)\n\t}\n\n\t// broadcast() broadcasts a message to all clients.\n\tbroadcast(message: string) {\n\t\t// Iterate over all the sessions sending them messages.\n\t\tthis.players.forEach((player) => {\n\t\t\ttry {\n\t\t\t\tplayer.websocket.send(message);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(`broadcast error: ${player}`);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync getDurableObjectLocation() {\n\t\tconst res = await fetch('https://workers.cloudflare.com/cf.json');\n\t\tconst json = (await res.json()) as IncomingRequestCfProperties;\n\t\tthis.dolocation = `${json.city} (${json.country})`;\n\t}\n\n\tscheduleNextAlarm(storage: DurableObjectStorage) {\n\t\ttry {\n\t\t\tconst alarmTime = Date.now() + healthCheckInterval;\n\t\t\tstorage.setAlarm(alarmTime);\n\t\t} catch {\n\t\t\tconsole.log('Durable Objects Alarms not supported in Miniflare (--local mode) yet.');\n\t\t}\n\t}\n\n\talarm() {\n\t\tif (this.rounds[this.currentRound].choices.size == 2) {\n\t\t\tconst round = this.resolveRound()\n\t\t\tconst msg: Message.RoundComplete = {\n\t\t\t\ttype: 'round',\n\t\t\t\tdata: round\n\t\t\t}\n\t\t\tthis.broadcast(JSON.stringify([msg]));\n\t\t} else {\n\t\t\tconst msg = { type: 'healthcheck' };\n\t\t\tthis.broadcast(JSON.stringify([msg]));\n\t\t}\n\n\t\tif (this.players.size) this.scheduleNextAlarm(this.storage);\n\t}\n}\n\nexport default {\n\tfetch() {\n\t\treturn new Response('This Worker creates the GameState Durable Object.');\n\t}\n}"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error","byteToHex","i","push","toString","slice","Choice","native","randomUUID","v4","options","buf","offset","rnds","random","arr","toLowerCase","unsafeStringify","GameState","id","players","rounds","currentRound","storage","dolocation","constructor","state","this","Map","Array","scheduleNextAlarm","getDurableObjectLocation","async","request","headers","cf","get","undefined","size","Response","status","pair","WebSocketPair","client","server","Object","values","player","handleWebSocketSession","JSON","stringify","webSocket","resolveRound","a","b","round","choices","Rock","Scissors","Paper","winner","metadata","accept","playerId","uuidv4","set","websocket","wins","addEventListener","msg","parse","data","choice","outbound","type","broadcast","err","send","error","stack","closeOrErrorHandler","console","log","message","forEach","res","fetch","json","city","country","alarmTime","Date","now","setAlarm","alarm","index"],"mappings":"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","x_google_ignoreList":[0,1,2,4]}